// Copyright (c) 2025, WSO2 LLC. (http://www.wso2.com).

// WSO2 LLC. licenses this file to you under the Apache License,
// Version 2.0 (the "License"); you may not use this file except
// in compliance with the License.
// You may obtain a copy of the License at

// http://www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
//
// AUTO-GENERATED FILE.
//
// This file is auto-generated by Ballerina.
// Developers are allowed to modify this file as per the requirement.

import fhir_service.db;

import ballerina/http;
import ballerina/log;
import ballerina/persist;
import ballerina/sql;
import ballerinax/health.fhir.r4;
import ballerinax/health.fhirr4;
import ballerinax/health.fhir.r4.uscore700;

configurable string SERVER_BASE_URL = ?;

final db:Client dbClient;

// Initialize database client
function init() returns error? {
    dbClient = check new ();
}

# Generic types to wrap all implemented profiles for each resource.
# Add required profile types here.
public type Patient uscore700:USCorePatientProfile;

public type Encounter uscore700:USCoreEncounterProfile;

listener http:Listener httpListener = http:getDefaultListener();

# initialize source system endpoints here

service http:Service /fhir/r4/metadata on httpListener {

    # The capability statement is a key part of the overall conformance framework in FHIR. It is used as a statement of the
    # features of actual software, or of a set of rules for an application to provide. This statement connects to all the
    # detailed statements of functionality, such as StructureDefinitions and ValueSets. This composite statement of application
    # capability may be used for system compatibility testing, code generation, or as the basis for a conformance assessment.
    # For further information https://hl7.org/fhir/capabilitystatement.html
    # + return - capability statement as a json
    isolated resource function get .() returns r4:CapabilityStatement|error {
        return check r4:generateFHIRCapabilityStatement();
    }
}

# Patient API                                                                                                          #
service /fhir/r4/Patient on new fhirr4:Listener(config = patientApiConfig) {

    // Read the current state of single resource based on its id.
    isolated resource function get [string id](r4:FHIRContext fhirContext) returns Patient|r4:OperationOutcome|r4:FHIRError {
        db:PatientDataOptionalized|persist:Error response = dbClient->/patientdata/[id]();
        if response is persist:Error {
            return r4:createFHIRError(string `Resource not found: ${id}`,
                    r4:ERROR,
                    r4:SECURITY_UNKNOWN,
                    cause = response,
                    httpStatusCode = http:STATUS_NOT_FOUND);
        } else {
            return mapCustomPatientToFHIR(response);
        }
    }

    // Read the state of a specific version of a resource based on its id.
    isolated resource function get [string id]/_history/[string vid](r4:FHIRContext fhirContext) returns Patient|r4:OperationOutcome|r4:FHIRError {
        return r4:createFHIRError("Not implemented", r4:ERROR, r4:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Search for resources based on a set of criteria.
    isolated resource function get .(r4:FHIRContext fhirContext) returns r4:Bundle|r4:OperationOutcome|r4:FHIRError {

        // Example of a search parameter implementation for "name" parameter.
        r4:StringSearchParameter[]|r4:FHIRTypeError? nameSearchParameter = fhirContext.getStringSearchParameter("name");
        if nameSearchParameter is r4:StringSearchParameter[] {
            string name = nameSearchParameter[0].value;
            sql:ParameterizedQuery query = `name = ${name}`;
            stream<db:PatientDataOptionalized, persist:Error?> streamResult = dbClient->/patientdata(targetType = db:PatientDataOptionalized, whereClause = query);
            do {
                r4:BundleEntry[] entries = check from var patientData in streamResult
                    select {
                        'resource: mapCustomPatientToFHIR(patientData)
                    };
                r4:Bundle bundle = {
                    entry: [...entries],
                    'type: "searchset"
                };
                return bundle;
            } on fail var e {
                log:printError("Error occurred while processing the stream", e);
                return r4:createFHIRError("Something went wrong while processing the data",
                        r4:ERROR,
                        r4:SECURITY_UNKNOWN,
                        cause = e,
                        httpStatusCode = http:STATUS_INTERNAL_SERVER_ERROR);
            }
        }

        return r4:createFHIRError("Search query is not supported", r4:ERROR, r4:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Create a new resource.
    isolated resource function post .(r4:FHIRContext fhirContext, Patient patient) returns r4:FHIRError|http:Response {
        db:PatientDataInsert mapFHIRTodbDataResult = mapFhirToCustomPatient(patient);
        string[]|persist:Error dbResponse = dbClient->/patientdata.post([mapFHIRTodbDataResult]);
        if dbResponse is persist:Error {
            // These errors will be converted to the OperationOutcome from the FHIR service layer.
            return r4:createFHIRError("Something went wrong while inserting data",
                    r4:ERROR,
                    r4:SECURITY_UNKNOWN,
                    cause = dbResponse,
                    httpStatusCode = http:STATUS_INTERNAL_SERVER_ERROR);
        }
        http:Response response = new;
        response.statusCode = http:STATUS_CREATED;
        response.addHeader(http:LOCATION, string `${SERVER_BASE_URL}/Patient/${dbResponse[0]}`);
        return response;
    }

    // Update the current state of a resource completely.
    isolated resource function put [string id](r4:FHIRContext fhirContext, Patient patient) returns Patient|r4:OperationOutcome|r4:FHIRError {
        return r4:createFHIRError("Not implemented", r4:ERROR, r4:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource partially.
    isolated resource function patch [string id](r4:FHIRContext fhirContext, json patch) returns Patient|r4:OperationOutcome|r4:FHIRError {
        return r4:createFHIRError("Not implemented", r4:ERROR, r4:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Delete a resource.
    isolated resource function delete [string id](r4:FHIRContext fhirContext) returns r4:OperationOutcome|r4:FHIRError {
        return r4:createFHIRError("Not implemented", r4:ERROR, r4:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for a particular resource.
    isolated resource function get [string id]/_history(r4:FHIRContext fhirContext) returns r4:Bundle|r4:OperationOutcome|r4:FHIRError {
        return r4:createFHIRError("Not implemented", r4:ERROR, r4:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for all resources.
    isolated resource function get _history(r4:FHIRContext fhirContext) returns r4:Bundle|r4:OperationOutcome|r4:FHIRError {
        return r4:createFHIRError("Not implemented", r4:ERROR, r4:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }
}

# Encounter API                                                                                                          #
service /fhir/r4/Encounter on new fhirr4:Listener(config = encounterApiConfig) {

    // Read the current state of single resource based on its id.
    isolated resource function get [string id](r4:FHIRContext fhirContext) returns Encounter|r4:OperationOutcome|r4:FHIRError {
        return r4:createFHIRError("Not implemented", r4:ERROR, r4:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Read the state of a specific version of a resource based on its id.
    isolated resource function get [string id]/_history/[string vid](r4:FHIRContext fhirContext) returns Encounter|r4:OperationOutcome|r4:FHIRError {
        return r4:createFHIRError("Not implemented", r4:ERROR, r4:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Search for resources based on a set of criteria.
    isolated resource function get .(r4:FHIRContext fhirContext) returns r4:Bundle|r4:OperationOutcome|r4:FHIRError {
        return r4:createFHIRError("Not implemented", r4:ERROR, r4:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Create a new resource.
    isolated resource function post .(r4:FHIRContext fhirContext, Encounter encounter) returns Encounter|r4:OperationOutcome|r4:FHIRError {
        return r4:createFHIRError("Not implemented", r4:ERROR, r4:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource completely.
    isolated resource function put [string id](r4:FHIRContext fhirContext, Encounter encounter) returns Encounter|r4:OperationOutcome|r4:FHIRError {
        return r4:createFHIRError("Not implemented", r4:ERROR, r4:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Update the current state of a resource partially.
    isolated resource function patch [string id](r4:FHIRContext fhirContext, json patch) returns Encounter|r4:OperationOutcome|r4:FHIRError {
        return r4:createFHIRError("Not implemented", r4:ERROR, r4:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Delete a resource.
    isolated resource function delete [string id](r4:FHIRContext fhirContext) returns r4:OperationOutcome|r4:FHIRError {
        return r4:createFHIRError("Not implemented", r4:ERROR, r4:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for a particular resource.
    isolated resource function get [string id]/_history(r4:FHIRContext fhirContext) returns r4:Bundle|r4:OperationOutcome|r4:FHIRError {
        return r4:createFHIRError("Not implemented", r4:ERROR, r4:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }

    // Retrieve the update history for all resources.
    isolated resource function get _history(r4:FHIRContext fhirContext) returns r4:Bundle|r4:OperationOutcome|r4:FHIRError {
        return r4:createFHIRError("Not implemented", r4:ERROR, r4:INFORMATIONAL, httpStatusCode = http:STATUS_NOT_IMPLEMENTED);
    }
}

